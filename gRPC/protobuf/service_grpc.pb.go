// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package gRPC

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DisysExercisegRPCClient is the client API for DisysExercisegRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DisysExercisegRPCClient interface {
	NewCourse(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CourseReply, error)
	GetCourse(ctx context.Context, in *CourseRequest, opts ...grpc.CallOption) (*CourseReply, error)
	DeleteCourse(ctx context.Context, in *CourseRequest, opts ...grpc.CallOption) (*CourseReply, error)
	EditCourse(ctx context.Context, in *CourseRequest, opts ...grpc.CallOption) (*CourseReply, error)
}

type disysExercisegRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewDisysExercisegRPCClient(cc grpc.ClientConnInterface) DisysExercisegRPCClient {
	return &disysExercisegRPCClient{cc}
}

func (c *disysExercisegRPCClient) NewCourse(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CourseReply, error) {
	out := new(CourseReply)
	err := c.cc.Invoke(ctx, "/DisysExercisegRPC.DisysExercisegRPC/NewCourse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disysExercisegRPCClient) GetCourse(ctx context.Context, in *CourseRequest, opts ...grpc.CallOption) (*CourseReply, error) {
	out := new(CourseReply)
	err := c.cc.Invoke(ctx, "/DisysExercisegRPC.DisysExercisegRPC/GetCourse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disysExercisegRPCClient) DeleteCourse(ctx context.Context, in *CourseRequest, opts ...grpc.CallOption) (*CourseReply, error) {
	out := new(CourseReply)
	err := c.cc.Invoke(ctx, "/DisysExercisegRPC.DisysExercisegRPC/DeleteCourse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disysExercisegRPCClient) EditCourse(ctx context.Context, in *CourseRequest, opts ...grpc.CallOption) (*CourseReply, error) {
	out := new(CourseReply)
	err := c.cc.Invoke(ctx, "/DisysExercisegRPC.DisysExercisegRPC/EditCourse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DisysExercisegRPCServer is the server API for DisysExercisegRPC service.
// All implementations must embed UnimplementedDisysExercisegRPCServer
// for forward compatibility
type DisysExercisegRPCServer interface {
	NewCourse(context.Context, *emptypb.Empty) (*CourseReply, error)
	GetCourse(context.Context, *CourseRequest) (*CourseReply, error)
	DeleteCourse(context.Context, *CourseRequest) (*CourseReply, error)
	EditCourse(context.Context, *CourseRequest) (*CourseReply, error)
	mustEmbedUnimplementedDisysExercisegRPCServer()
}

// UnimplementedDisysExercisegRPCServer must be embedded to have forward compatible implementations.
type UnimplementedDisysExercisegRPCServer struct {
}

func (UnimplementedDisysExercisegRPCServer) NewCourse(context.Context, *emptypb.Empty) (*CourseReply, error) {
	reply := new(CourseReply)

	reply.Id = 0
	reply.Name = "Golang 101"
	reply.ExpectedWorkload = 10
	reply.Rating = 1.5

	return &reply, nil
}
func (UnimplementedDisysExercisegRPCServer) GetCourse(context.Context, *CourseRequest) (*CourseReply, error) {
	reply := new(CourseReply)

	reply.Id = 0
	reply.Name = "Golang 101"
	reply.ExpectedWorkload = 10
	reply.Rating = 1.5

	return &reply, nil
}
func (UnimplementedDisysExercisegRPCServer) DeleteCourse(context.Context, *CourseRequest) (*CourseReply, error) {
	reply := new(CourseReply)

	reply.Id = 0
	reply.Name = "Golang 101"
	reply.ExpectedWorkload = 10
	reply.Rating = 1.5

	return &reply, nil
}
func (UnimplementedDisysExercisegRPCServer) EditCourse(context.Context, *CourseRequest) (*CourseReply, error) {
	reply := new(CourseReply)

	reply.Id = 0
	reply.Name = "Golang 101"
	reply.ExpectedWorkload = 10
	reply.Rating = 1.5

	return &reply, nil
}
func (UnimplementedDisysExercisegRPCServer) mustEmbedUnimplementedDisysExercisegRPCServer() {}

// UnsafeDisysExercisegRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DisysExercisegRPCServer will
// result in compilation errors.
type UnsafeDisysExercisegRPCServer interface {
	mustEmbedUnimplementedDisysExercisegRPCServer()
}

func RegisterDisysExercisegRPCServer(s grpc.ServiceRegistrar, srv DisysExercisegRPCServer) {
	s.RegisterService(&DisysExercisegRPC_ServiceDesc, srv)
}

func _DisysExercisegRPC_NewCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DisysExercisegRPCServer).NewCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DisysExercisegRPC.DisysExercisegRPC/NewCourse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DisysExercisegRPCServer).NewCourse(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DisysExercisegRPC_GetCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CourseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DisysExercisegRPCServer).GetCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DisysExercisegRPC.DisysExercisegRPC/GetCourse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DisysExercisegRPCServer).GetCourse(ctx, req.(*CourseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DisysExercisegRPC_DeleteCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CourseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DisysExercisegRPCServer).DeleteCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DisysExercisegRPC.DisysExercisegRPC/DeleteCourse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DisysExercisegRPCServer).DeleteCourse(ctx, req.(*CourseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DisysExercisegRPC_EditCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CourseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DisysExercisegRPCServer).EditCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DisysExercisegRPC.DisysExercisegRPC/EditCourse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DisysExercisegRPCServer).EditCourse(ctx, req.(*CourseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DisysExercisegRPC_ServiceDesc is the grpc.ServiceDesc for DisysExercisegRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DisysExercisegRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "DisysExercisegRPC.DisysExercisegRPC",
	HandlerType: (*DisysExercisegRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewCourse",
			Handler:    _DisysExercisegRPC_NewCourse_Handler,
		},
		{
			MethodName: "GetCourse",
			Handler:    _DisysExercisegRPC_GetCourse_Handler,
		},
		{
			MethodName: "DeleteCourse",
			Handler:    _DisysExercisegRPC_DeleteCourse_Handler,
		},
		{
			MethodName: "EditCourse",
			Handler:    _DisysExercisegRPC_EditCourse_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
